{"version":3,"file":"static/js/634.3c860f30.chunk.js","mappings":"6SAMMA,GAAaC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,iPAeHE,EAAW,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,GAAIC,EAAe,EAAfA,SAC7B,OACE,UAACL,EAAD,CAAYI,GAAIA,EAAhB,WACE,SAAC,MAAD,CAAaE,KAAK,OACjBD,IAGN,ECzBYE,EAAaN,EAAAA,GAAAA,IAAH,kFAMVO,EAAeP,EAAAA,GAAAA,IAAH,0GAOZQ,EAAaR,EAAAA,GAAAA,GAAH,yFAMVS,EAAiBT,EAAAA,GAAAA,EAAH,yFAMdU,EAAgBV,EAAAA,GAAAA,GAAH,yFAMbW,EAAYX,EAAAA,GAAAA,GAAH,mFAMTY,EAAWZ,EAAAA,GAAAA,IAAH,8FAMRa,EAAeb,EAAAA,GAAAA,GAAH,kFAMZc,GAAYd,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,2GC+BtB,EA/Dc,WAAO,IAAD,EAClB,GAA0Be,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KACQC,GAAOC,EAAAA,EAAAA,MAAPD,GACFE,GAAWC,EAAAA,EAAAA,MACXC,GAAeC,EAAAA,EAAAA,SAAO,UAAAH,EAASI,aAAT,eAAgBC,OAAQ,KAYpD,OAVAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,mCAAG,sGACMC,MAAM,sCAAD,OACYV,EADZ,oBAVtB,mCAUsB,oBADX,cACXW,EADW,gBAIEA,EAASC,OAJX,OAIXC,EAJW,OAKjBd,EAASc,GALQ,2CAAH,qDAOhBJ,GACD,GAAE,CAACT,KAEF,8BACGF,IACC,iCACE,SAACd,EAAD,CAAUC,GAAImB,EAAaU,QAA3B,oBAEA,UAAC1B,EAAD,YACE,gBACE2B,IAAG,yCAAoCjB,EAAMkB,aAC7CC,IAAKnB,EAAMoB,SAEb,UAAC7B,EAAD,YACE,SAACC,EAAD,UAAaQ,EAAMoB,SACnB,UAAC3B,EAAD,0BACe4B,KAAKC,MAA2B,GAArBtB,EAAMuB,cADhC,QAGA,SAAC7B,EAAD,wBACA,SAACD,EAAD,UAAiBO,EAAMwB,YACvB,SAAC9B,EAAD,sBACA,SAACC,EAAD,UACGK,EAAMyB,OAAOC,KAAI,SAAAC,GAAK,OACrB,wBAAoBA,EAAMC,MAAjBD,EAAMzB,GADM,aAM7B,UAACN,EAAD,YACE,SAACF,EAAD,8BACA,UAACG,EAAD,YACE,yBACE,SAACC,EAAD,CAAWX,GAAG,OAAd,qBAEF,yBACE,SAACW,EAAD,CAAWX,GAAG,UAAd,8BAIN,SAAC,EAAA0C,SAAD,CAAUC,UAAU,gDAApB,UACE,SAAC,KAAD,UAMX,C","sources":["components/BackLink.jsx","pages/Movie/Movie.styled.jsx","pages/Movie/Movie.jsx"],"sourcesContent":["import Proptypes from 'prop-types';\n\nimport { HiArrowLeft } from 'react-icons/hi';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nconst StyledLink = styled(Link)`\n  display: inline-flex;\n  align-items: center;\n  gap: 4px;\n  padding: 8px 0;\n  color: black;\n  text-decoration: none;\n  font-weight: 500;\n  text-transform: uppercase;\n\n  :hover {\n    color: orangered;\n  }\n`;\n\nexport const BackLink = ({ to, children }) => {\n  return (\n    <StyledLink to={to}>\n      <HiArrowLeft size=\"24\" />\n      {children}\n    </StyledLink>\n  );\n};\n\nBackLink.propTypes = {\n  to: Proptypes.string.isRequired,\n  children: Proptypes.node.isRequired,\n};\n","import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const CardWraper = styled.div`\n  display: flex;\n  width: 800px;\n  padding-left: 20px;\n`;\n\nexport const MovieWrapper = styled.div`\n  display: flex;\n  margin-left: 20px;\n  flex-direction: column;\n  width: 75%;\n`;\n\nexport const MovieTitle = styled.h1`\n  font-size: 30px;\n  font-weight: 700;\n  margin-bottom: 20px;\n`;\n\nexport const MovieParagraph = styled.p`\n  font-size: 20px;\n  font-weight: 500;\n  margin-bottom: 20px;\n`;\n\nexport const MovieSubTitle = styled.h2`\n  font-size: 25px;\n  font-weight: 700;\n  margin-bottom: 10px;\n`;\n\nexport const MovieList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;\n\nexport const MovieNav = styled.div`\n  padding-left: 20px;\n  padding-bottom: 20px;\n  padding-top: 20px;\n`;\n\nexport const MovieNavList = styled.ul`\n  display: flex;\n  gap: 20px;\n  list-style-type: none;\n`;\n\nexport const MovieLink = styled(Link)`\n  font-size: 20px;\n  font-weight: 500;\n  color: #000;\n  text-decoration: none;\n`;\n","\nimport { Outlet, useParams, useLocation } from 'react-router-dom';\nimport { useState, useEffect, useRef, Suspense } from 'react';\n\nimport { BackLink } from 'components/BackLink';\n\nimport {\n  MovieWrapper,\n  MovieTitle,\n  MovieParagraph,\n  MovieSubTitle,\n  MovieList,\n  CardWraper,\n  MovieLink,\n  MovieNav,\n  MovieNavList,\n} from './Movie.styled';\n\nconst KEY = '41ab92c3df4691a01a2e362c5f7f74c0';\n\nconst Movie = () => {\n  const [movie, setMovie] = useState(null);\n  const { id } = useParams();\n  const location = useLocation();\n  const backLinkHref = useRef(location.state?.from || '/');\n\n  useEffect(() => {\n    const fetchMovie = async () => {\n      const response = await fetch(\n        `https://api.themoviedb.org/3/movie/${id}?api_key=${KEY}&language=en-US`\n      );\n      const data = await response.json();\n      setMovie(data);\n    };\n    fetchMovie();\n  }, [id]);\n  return (\n    <>\n      {movie && (\n        <>\n          <BackLink to={backLinkHref.current}> Back</BackLink>\n\n          <CardWraper>\n            <img\n              src={`https://image.tmdb.org/t/p/w300${movie.poster_path}`}\n              alt={movie.title}\n            />\n            <MovieWrapper>\n              <MovieTitle>{movie.title}</MovieTitle>\n              <MovieParagraph>\n                User Score: {Math.round(movie.vote_average * 10)}%\n              </MovieParagraph>\n              <MovieSubTitle>Overview</MovieSubTitle>\n              <MovieParagraph>{movie.overview}</MovieParagraph>\n              <MovieSubTitle>Genres</MovieSubTitle>\n              <MovieList>\n                {movie.genres.map(genre => (\n                  <li key={genre.id}>{genre.name}</li>\n                ))}\n              </MovieList>\n            </MovieWrapper>\n          </CardWraper>\n          <MovieNav>\n            <MovieSubTitle>Aditional info</MovieSubTitle>\n            <MovieNavList>\n              <li>\n                <MovieLink to=\"cast\">Cast</MovieLink>\n              </li>\n              <li>\n                <MovieLink to=\"reviews\">Reviews</MovieLink>\n              </li>\n            </MovieNavList>\n          </MovieNav>\n          <Suspense fallback={<div>Loading subpage...</div>}>\n            <Outlet />\n          </Suspense>\n        </>\n      )}\n    </>\n  );\n};\n\n\nexport default Movie;\n"],"names":["StyledLink","styled","Link","BackLink","to","children","size","CardWraper","MovieWrapper","MovieTitle","MovieParagraph","MovieSubTitle","MovieList","MovieNav","MovieNavList","MovieLink","useState","movie","setMovie","id","useParams","location","useLocation","backLinkHref","useRef","state","from","useEffect","fetchMovie","fetch","response","json","data","current","src","poster_path","alt","title","Math","round","vote_average","overview","genres","map","genre","name","Suspense","fallback"],"sourceRoot":""}